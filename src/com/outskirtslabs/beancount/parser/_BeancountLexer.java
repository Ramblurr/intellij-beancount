/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.outskirtslabs.beancount.parser;

import java.util.LinkedList;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.outskirtslabs.beancount.psi.BeancountTypes.*;
import static com.outskirtslabs.beancount.BeancountLexerUtil.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Beancount.flex</tt>
 */
public class _BeancountLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int sOPT = 2;
  public static final int sEVENT = 4;
  public static final int sDATE_ENTRY = 6;
  public static final int sOPEN = 8;
  public static final int sBALANCE = 10;
  public static final int sPRICE = 12;
  public static final int sCOMMODITY = 14;
  public static final int sMETA_LIST = 16;
  public static final int sPOSTING = 18;
  public static final int sACCOUNT = 20;
  public static final int sCUSTOM = 22;
  public static final int sTXN = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  3,  2,  3,  4,  5,  6,  7,  6,  7,  2,  3,  2,  3, 
     8,  9, 10, 11, 12, 13, 14, 15, 16, 17
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 8128 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\35\12\1\14\1\15\24\12"+
    "\1\16\1\12\1\17\1\12\1\20\1\21\1\22\1\23\1\24\22\12\1\25\32\12\1\26\4\12\1"+
    "\27\1\12\1\30\u03c3\12");

  /* The ZZ_CMAP_Y table has 1600 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\3\1\1\11\1\12\2\1\3\13\1\14\1\15\2\13"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\13\1\25\3\13\1\26\1\27\22\1\1\30\1\31"+
    "\1\32\1\33\1\1\1\34\1\35\1\13\1\36\3\11\3\1\2\13\1\37\3\13\1\40\6\13\1\32"+
    "\1\11\1\41\20\1\1\42\10\1\1\42\14\1\1\42\31\1\1\43\7\1\1\43\7\1\1\43\7\1\1"+
    "\43\7\1\1\43\7\1\1\43\7\1\1\43\7\1\1\43\7\1\1\43\7\1\1\43\6\1\1\42\7\1\1\42"+
    "\4\1\1\42\21\1\1\42\4\1\1\42\2\11\1\44\55\1\5\11\1\45\76\1\1\42\2\1\1\42\22"+
    "\1\1\43\10\1\1\42\12\1\2\42\13\1\1\42\5\1\1\42\10\1\2\42\32\1\11\13\1\46\6"+
    "\13\1\47\1\50\2\47\1\50\1\51\1\47\4\1\3\52\1\53\1\52\2\1\1\54\15\1\1\55\1"+
    "\56\1\57\1\60\1\61\1\1\1\11\1\1\1\62\62\1\1\63\1\11\163\1\2\11\1\64\3\1\1"+
    "\65\1\66\6\13\1\67\1\70\122\1\1\42\1\1\2\13\1\71\1\1\1\13\1\72\10\1\2\73\3"+
    "\13\1\74\1\75\1\76\1\77\1\100\21\1\1\42\2\1\1\42\14\1\1\42\1\1\1\42\5\1\1"+
    "\42\31\1\1\42\61\1\1\42\1\32\1\101\14\1\2\11\1\102\7\1\1\42\2\11\1\103\72"+
    "\1\3\11\1\104\72\1\1\43\10\1\1\42\3\1\1\43\11\1\1\42\21\1\1\42\25\1\1\42\7"+
    "\1\1\42\27\1\1\42\6\1\1\42\6\1\1\42\26\1\2\11\2\1\1\42\66\1\1\42\140\1\1\42"+
    "\16\1\1\42\12\1\1\11\1\105\1\1\1\106\1\107\1\1\1\47\1\11\1\110\1\111\1\112"+
    "\1\45\1\1\1\11\1\105\1\1\1\113\1\114\1\1\1\115\1\116\1\117\1\120\1\11\1\45"+
    "\1\1\1\11\1\105\1\1\1\106\1\107\1\1\1\47\1\11\1\110\1\120\1\11\1\45\1\1\1"+
    "\11\1\105\1\1\1\47\1\11\1\117\1\1\1\121\1\101\1\1\1\120\1\11\1\122\1\1\1\63"+
    "\1\64\2\1\1\11\1\123\1\1\1\124\3\125\20\1\2\11\1\110\2\1\1\42\75\1\1\11\1"+
    "\105\1\11\1\105\1\11\1\105\47\1");

  /* The ZZ_CMAP_A table has 1376 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\12\0\1\10\2\11\1\10\22\0\1\13\1\14\1\6\1\23\4\0\1\52\1\53\1\55\1\54\1\51"+
    "\1\4\1\3\1\20\12\2\1\22\1\12\4\0\1\21\32\1\1\0\1\7\1\0\1\24\1\17\1\0\1\35"+
    "\1\34\1\30\1\40\1\31\3\16\1\27\2\16\1\36\1\37\1\33\1\32\1\25\1\16\1\26\1\46"+
    "\1\41\1\45\1\43\1\16\1\44\1\42\1\16\1\47\1\0\1\50\7\0\1\11\12\0\27\15\1\0"+
    "\7\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0\1"+
    "\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15\2\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15"+
    "\1\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15\2\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15\1"+
    "\0\1\15\1\0\1\15\1\0\1\15\1\0\2\15\1\0\1\15\1\0\1\15\3\0\2\15\1\0\1\15\1\0"+
    "\2\15\1\0\3\15\2\0\4\15\1\0\2\15\1\0\3\15\3\0\2\15\1\0\2\15\1\0\1\15\1\0\1"+
    "\15\1\0\2\15\1\0\1\15\2\0\1\15\1\0\2\15\1\0\3\15\1\0\1\15\1\0\2\15\3\0\1\15"+
    "\7\0\1\15\2\0\1\15\2\0\1\15\2\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15\1"+
    "\0\1\15\1\0\1\15\1\0\1\15\2\0\1\15\2\0\1\15\2\0\1\15\1\0\3\15\1\0\1\15\1\0"+
    "\1\15\1\0\1\15\1\0\1\15\1\0\1\15\7\0\2\15\1\0\2\15\2\0\1\15\1\0\4\15\1\0\1"+
    "\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15\3\0\1\15\10\0\1\15\6\0\1"+
    "\15\1\0\3\15\1\0\1\15\1\0\2\15\1\0\21\15\1\0\11\15\23\0\1\15\2\0\3\15\3\0"+
    "\1\15\1\0\1\15\1\0\1\15\1\0\1\15\5\0\1\15\2\0\1\15\1\0\2\15\2\0\4\15\11\0"+
    "\1\15\1\0\1\15\1\0\1\15\1\0\2\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0\1"+
    "\15\1\0\1\15\2\0\7\15\11\0\12\5\14\0\12\5\6\15\1\0\1\15\5\0\1\15\2\0\6\15"+
    "\12\0\1\15\1\0\1\15\1\0\1\15\11\0\1\15\11\0\10\15\10\0\6\15\13\0\1\15\1\0"+
    "\1\15\1\0\1\15\1\0\1\15\10\0\4\15\14\0\5\15\13\0\2\11\10\0\1\15\4\0\1\15\3"+
    "\0\3\15\2\0\3\15\2\0\1\15\3\0\5\15\6\0\1\15\1\0\1\15\1\0\1\15\1\0\4\15\2\0"+
    "\4\15\12\0\2\15\5\0\1\15\15\0\1\15\22\0\31\15\1\0\1\15\1\0\3\15\2\0\1\15\1"+
    "\0\1\15\1\0\1\15\1\0\4\15\1\0\1\15\2\0\1\15\10\0\3\15\1\0\1\15\10\0\1\15\1"+
    "\0\1\15\4\0\1\15\15\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15\1"+
    "\0\1\15\3\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15\7\0\1\15\1\0"+
    "\1\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15\12\0\1\15\1\0\1\15\1\0"+
    "\2\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15\4\0\1\15\1\0\1\15\2\0\1\15\1\0\1"+
    "\15\3\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15"+
    "\1\0\1\15\1\0\1\15\1\0\5\15\1\0\5\15\1\0\1\15\11\0\13\15\5\0\10\15\10\0\4"+
    "\15\14\0\3\15\15\0\12\15\12\0\32\15\2\0\2\15\32\0\1\15\1\0\2\15\2\0\1\15\2"+
    "\0\2\15\2\0\4\15\1\0\2\15\4\0\2\15\1\0\4\15\2\0\10\15\1\0\7\15\13\0\2\15\1"+
    "\0\4\15\1\0\5\15\1\0\1\15\3\0\7\15\33\0\4\15\2\0\23\15\13\0\11\15\21\0\1\15"+
    "\3\0\22\5");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\22\0\2\1\1\2\1\3\2\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\2\3\1\4\20\1\21\2\22\1\23\6\20"+
    "\2\24\1\25\1\20\1\26\1\27\1\30\1\31\1\32"+
    "\1\31\1\33\1\34\1\33\1\4\1\35\1\22\1\36"+
    "\1\0\2\2\1\0\1\37\1\0\1\40\1\0\1\41"+
    "\1\42\1\43\1\2\13\0\1\36\1\44\1\45\1\46"+
    "\1\2\1\0\1\37\1\2\1\0\1\47\7\0\1\2"+
    "\1\0\1\2\6\0\1\50\1\0\1\2\3\0\1\51"+
    "\2\0\1\52\3\0\1\53\1\0\1\54\4\0\1\55"+
    "\5\0\1\56\1\57\1\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[149];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284\0\u02b2"+
    "\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6\0\u03f4\0\u0422"+
    "\0\u0450\0\u047e\0\u033c\0\u04ac\0\u033c\0\u04da\0\u0508\0\u033c"+
    "\0\u033c\0\u033c\0\u033c\0\u033c\0\u0536\0\u0564\0\u0592\0\u05c0"+
    "\0\u033c\0\u036a\0\u03f4\0\u0422\0\u05ee\0\u061c\0\u064a\0\u033c"+
    "\0\u0678\0\u06a6\0\u06d4\0\u0702\0\u0730\0\u075e\0\u078c\0\u07ba"+
    "\0\u07e8\0\u0816\0\u033c\0\u033c\0\u0844\0\u0872\0\u033c\0\u08a0"+
    "\0\u033c\0\u08ce\0\u0422\0\u08fc\0\u033c\0\u092a\0\u036a\0\u036a"+
    "\0\u0958\0\u0986\0\u09b4\0\u09e2\0\u0422\0\u033c\0\u0a10\0\u033c"+
    "\0\u033c\0\u033c\0\u0a3e\0\u0a6c\0\u0592\0\u0a9a\0\u0ac8\0\u0af6"+
    "\0\u0b24\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a\0\u078c\0\u0816"+
    "\0\u08fc\0\u0c38\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0\0\u0d1e\0\u0a9a"+
    "\0\u0d4c\0\u0d7a\0\u0da8\0\u0dd6\0\u0e04\0\u0e32\0\u0e60\0\u0e8e"+
    "\0\u0ebc\0\u0eea\0\u0f18\0\u0f46\0\u0f74\0\u0fa2\0\u0fd0\0\u0ffe"+
    "\0\u033c\0\u102c\0\u105a\0\u1088\0\u10b6\0\u10e4\0\u033c\0\u1112"+
    "\0\u1140\0\u033c\0\u116e\0\u119c\0\u11ca\0\u033c\0\u11f8\0\u033c"+
    "\0\u1226\0\u1254\0\u1282\0\u12b0\0\u033c\0\u12de\0\u130c\0\u133a"+
    "\0\u1368\0\u1396\0\u033c\0\u033c\0\u033c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[149];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\23\1\24\1\25\1\23\1\26\1\27\1\30\1\23"+
    "\1\31\1\23\1\32\5\23\1\33\1\34\1\23\1\35"+
    "\23\23\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\23\1\24\1\45\1\23\1\26\1\46\1\30\1\23"+
    "\1\31\1\23\1\32\1\47\4\23\1\33\1\34\1\23"+
    "\1\35\6\23\1\50\14\23\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\51\1\52\1\25\1\51\1\26"+
    "\1\53\1\54\1\51\1\55\2\51\1\56\4\51\1\33"+
    "\1\34\1\51\1\35\23\51\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\51\1\52\1\25\1\51\1\26"+
    "\1\53\1\54\1\51\1\55\2\51\1\57\4\51\1\33"+
    "\1\34\1\51\1\35\23\51\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\51\1\52\1\25\1\51\1\26"+
    "\1\53\1\54\4\51\1\56\1\60\3\51\1\33\1\34"+
    "\1\51\1\35\1\51\1\61\2\51\1\62\1\63\1\64"+
    "\1\51\1\65\4\51\1\66\5\51\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\60\1\51\1\52\1\25\1\51"+
    "\1\26\1\53\1\54\4\51\1\57\1\60\3\51\1\33"+
    "\1\34\1\51\1\35\1\51\1\61\2\51\1\62\1\63"+
    "\1\64\1\51\1\65\4\51\1\66\5\51\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\60\1\51\1\67\1\25"+
    "\1\51\1\26\1\53\1\54\1\51\1\55\2\51\1\56"+
    "\1\51\1\70\2\51\1\33\1\34\1\51\1\35\23\51"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\51"+
    "\1\67\1\25\1\51\1\26\1\53\1\54\1\51\1\55"+
    "\2\51\1\57\1\51\1\70\2\51\1\33\1\34\1\51"+
    "\1\35\23\51\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\51\1\52\1\25\1\51\1\26\1\53\1\54"+
    "\1\51\1\71\2\51\1\56\2\51\1\72\1\51\1\33"+
    "\1\34\1\73\1\35\1\51\22\72\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\51\1\52\1\25\1\51"+
    "\1\26\1\53\1\54\1\51\1\71\2\51\1\57\2\51"+
    "\1\72\1\51\1\33\1\34\1\73\1\35\1\51\22\72"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\51"+
    "\1\52\1\25\1\51\1\26\1\53\1\54\1\51\1\74"+
    "\2\51\1\56\4\51\1\33\1\34\1\51\1\35\23\51"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\51"+
    "\1\52\1\25\1\51\1\26\1\53\1\54\1\51\1\74"+
    "\2\51\1\57\4\51\1\33\1\34\1\51\1\35\23\51"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\51"+
    "\1\75\1\25\1\51\1\26\1\53\1\54\1\51\1\74"+
    "\2\51\1\76\1\51\1\75\2\51\1\33\1\34\1\77"+
    "\1\35\23\51\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\51\1\75\1\25\1\51\1\26\1\53\1\54"+
    "\1\51\1\74\2\51\1\100\1\51\1\75\2\51\1\33"+
    "\1\34\1\77\1\35\23\51\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\23\1\67\1\25\1\23\1\26"+
    "\1\27\1\30\1\23\1\74\2\23\1\56\1\23\1\70"+
    "\2\23\1\33\1\34\1\23\1\35\23\23\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\23\1\67\1\25"+
    "\1\23\1\26\1\27\1\30\1\23\1\74\2\23\1\57"+
    "\1\23\1\70\2\23\1\33\1\34\1\23\1\35\23\23"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\101"+
    "\4\102\1\101\1\103\1\101\1\104\2\101\1\56\2\101"+
    "\3\102\2\101\1\35\1\105\22\102\10\101\4\102\1\101"+
    "\1\103\1\101\1\104\2\101\1\106\2\101\3\102\2\101"+
    "\1\35\1\105\22\102\7\101\57\0\1\107\2\0\1\110"+
    "\12\0\1\110\40\0\1\111\1\112\1\0\1\113\52\0"+
    "\1\114\55\0\1\113\2\0\1\113\50\0\6\115\1\116"+
    "\1\117\46\115\10\0\1\31\45\0\10\32\2\0\44\32"+
    "\21\0\1\120\103\0\1\121\56\0\1\122\7\0\1\123"+
    "\1\112\1\0\1\124\52\0\1\124\2\0\1\124\63\0"+
    "\1\125\2\0\1\126\6\0\22\126\34\0\1\127\40\0"+
    "\1\55\60\0\1\56\55\0\1\57\2\0\1\126\6\0"+
    "\22\126\35\0\1\130\61\0\1\131\12\0\1\132\53\0"+
    "\1\133\37\0\1\134\65\0\1\135\64\0\1\136\12\0"+
    "\1\137\1\70\1\0\1\67\11\0\1\70\1\67\5\0"+
    "\22\70\10\0\2\70\1\0\1\70\11\0\2\70\5\0"+
    "\22\70\17\0\1\71\46\0\2\140\1\0\1\140\11\0"+
    "\2\140\5\0\22\140\10\0\2\75\1\0\1\75\11\0"+
    "\2\75\5\0\22\75\22\0\1\76\55\0\1\100\2\0"+
    "\1\126\6\0\22\126\10\0\4\102\11\0\3\102\4\0"+
    "\22\102\17\0\1\141\46\0\1\142\11\0\1\106\1\0"+
    "\1\142\1\126\6\0\22\126\11\0\1\143\1\112\1\0"+
    "\1\144\52\0\1\112\55\0\1\144\2\0\1\144\52\0"+
    "\1\114\1\145\52\0\10\115\2\0\44\115\2\0\1\146"+
    "\1\112\1\0\1\147\52\0\1\147\2\0\1\147\51\0"+
    "\2\150\1\0\1\150\11\0\2\150\5\0\22\150\50\0"+
    "\1\151\43\0\1\152\65\0\1\153\64\0\1\154\40\0"+
    "\1\155\55\0\1\156\62\0\1\157\52\0\1\60\23\0"+
    "\2\142\1\0\1\142\11\0\2\142\5\0\22\142\11\0"+
    "\1\160\1\112\1\0\1\161\52\0\1\161\2\0\1\161"+
    "\52\0\1\145\55\0\1\162\1\112\1\0\1\163\52\0"+
    "\1\163\2\0\1\163\77\0\1\164\56\0\1\165\64\0"+
    "\1\166\57\0\1\167\47\0\1\170\55\0\1\171\57\0"+
    "\1\172\22\0\1\173\1\112\1\174\55\0\1\174\53\0"+
    "\1\173\1\112\1\175\55\0\1\175\103\0\1\176\54\0"+
    "\1\177\56\0\1\200\55\0\1\201\64\0\1\202\47\0"+
    "\1\203\24\0\1\173\1\112\54\0\1\204\2\0\1\204"+
    "\52\0\1\205\2\0\1\205\103\0\1\206\62\0\1\207"+
    "\54\0\1\210\46\0\1\211\27\0\1\212\2\0\1\212"+
    "\52\0\1\213\2\0\1\213\77\0\1\214\57\0\1\215"+
    "\30\0\1\216\55\0\1\217\112\0\1\220\16\0\1\221"+
    "\2\0\1\221\52\0\1\222\2\0\1\222\112\0\1\223"+
    "\15\0\1\224\2\0\1\224\52\0\1\225\2\0\1\225"+
    "\50\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5060];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\22\0\1\11\7\1\1\11\1\1\1\11\2\1\5\11"+
    "\4\1\1\11\6\1\1\11\12\1\2\11\2\1\1\11"+
    "\1\1\1\11\3\1\1\11\2\1\1\0\2\1\1\0"+
    "\1\1\1\0\1\11\1\0\3\11\1\1\13\0\5\1"+
    "\1\0\2\1\1\0\1\1\7\0\1\1\1\0\1\1"+
    "\6\0\1\11\1\0\1\1\3\0\1\11\2\0\1\11"+
    "\3\0\1\11\1\0\1\11\4\0\1\11\5\0\3\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[149];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _BeancountLexer() {
    this((java.io.Reader)null);
  }

  private final LinkedList<Integer> states = new LinkedList();

  private void yypushstate(int state) {
      states.addFirst(yystate());
        yylogstate(state);
  }

    private void yypopstate() {
      if(states.isEmpty()) {
        yylogstate(YYINITIAL);
      } else  {
        final int state = states.removeFirst();
        yylogstate(state);
      }
    }
    private void yylogstate(int state) {
//    System.out.println("   state is now "+ state);
    yybegin(state);
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _BeancountLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall though
        case '\u000C':  // fall though
        case '\u0085':  // fall though
        case '\u2028':  // fall though
        case '\u2029':  // fall though
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return SKIP;
            } 
            // fall through
          case 49: break;
          case 2: 
            { return NUMBER;
            } 
            // fall through
          case 50: break;
          case 3: 
            { return MINUS;
            } 
            // fall through
          case 51: break;
          case 4: 
            { return EOL;
            } 
            // fall through
          case 52: break;
          case 5: 
            { return COMMENT;
            } 
            // fall through
          case 53: break;
          case 6: 
            { return DIVIDE;
            } 
            // fall through
          case 54: break;
          case 7: 
            { return AT;
            } 
            // fall through
          case 55: break;
          case 8: 
            { return HASH;
            } 
            // fall through
          case 56: break;
          case 9: 
            { return LCURL;
            } 
            // fall through
          case 57: break;
          case 10: 
            { return RCURL;
            } 
            // fall through
          case 58: break;
          case 11: 
            { return COMMA;
            } 
            // fall through
          case 59: break;
          case 12: 
            { return LPAREN;
            } 
            // fall through
          case 60: break;
          case 13: 
            { return RPAREN;
            } 
            // fall through
          case 61: break;
          case 14: 
            { return PLUS;
            } 
            // fall through
          case 62: break;
          case 15: 
            { return ASTERISK;
            } 
            // fall through
          case 63: break;
          case 16: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 64: break;
          case 17: 
            { yylogstate(YYINITIAL); return EOL;
            } 
            // fall through
          case 65: break;
          case 18: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 66: break;
          case 19: 
            { yylogstate(sTXN); return TXN;
            } 
            // fall through
          case 67: break;
          case 20: 
            { yypushstate(sACCOUNT); return ACCOUNT_WORD;
            } 
            // fall through
          case 68: break;
          case 21: 
            { yypopstate(); return EOL;
            } 
            // fall through
          case 69: break;
          case 22: 
            { return META_KV_DELIMITER;
            } 
            // fall through
          case 70: break;
          case 23: 
            { yypushback(yylength()); yypopstate();
            } 
            // fall through
          case 71: break;
          case 24: 
            { return ACCOUNT_WORD;
            } 
            // fall through
          case 72: break;
          case 25: 
            { yypopstate(); return WHITE_SPACE;
            } 
            // fall through
          case 73: break;
          case 26: 
            { return COLON;
            } 
            // fall through
          case 74: break;
          case 27: 
            { /*this effectively detects the last posting line*/ yypushback(yylength()); yypopstate();
            } 
            // fall through
          case 75: break;
          case 28: 
            { return TAG_LINK_VALUE;
            } 
            // fall through
          case 76: break;
          case 29: 
            { return CARET;
            } 
            // fall through
          case 77: break;
          case 30: 
            { return CURRENCY;
            } 
            // fall through
          case 78: break;
          case 31: 
            { return NEGATIVE_NUMBER;
            } 
            // fall through
          case 79: break;
          case 32: 
            { return STRING;
            } 
            // fall through
          case 80: break;
          case 33: 
            { return ATAT;
            } 
            // fall through
          case 81: break;
          case 34: 
            { return LCURLCURL;
            } 
            // fall through
          case 82: break;
          case 35: 
            { return RCURLCURL;
            } 
            // fall through
          case 83: break;
          case 36: 
            { return META_KEY;
            } 
            // fall through
          case 84: break;
          case 37: 
            { yypopstate();  return EOL;
            } 
            // fall through
          case 85: break;
          case 38: 
            { yypushback(nonWsIndex(yytext())); yypushstate(sPOSTING); yypushstate(sACCOUNT); return INDENT;
            } 
            // fall through
          case 86: break;
          case 39: 
            { yypushback(nonWsIndex(yytext())); yypushstate(sMETA_LIST); return INDENT;
            } 
            // fall through
          case 87: break;
          case 40: 
            { yylogstate(sOPEN); return OPEN;
            } 
            // fall through
          case 88: break;
          case 41: 
            { yylogstate(sPRICE); return PRICE;
            } 
            // fall through
          case 89: break;
          case 42: 
            { yylogstate(sEVENT); return EVENT;
            } 
            // fall through
          case 90: break;
          case 43: 
            { yylogstate(sOPT); return OPTION;
            } 
            // fall through
          case 91: break;
          case 44: 
            { yylogstate(sCUSTOM); return CUSTOM;
            } 
            // fall through
          case 92: break;
          case 45: 
            { yylogstate(sBALANCE); return BALANCE;
            } 
            // fall through
          case 93: break;
          case 46: 
            { yylogstate(sCOMMODITY); return COMMODITY;
            } 
            // fall through
          case 94: break;
          case 47: 
            { return DATE;
            } 
            // fall through
          case 95: break;
          case 48: 
            { yylogstate(sDATE_ENTRY); return DATE;
            } 
            // fall through
          case 96: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
